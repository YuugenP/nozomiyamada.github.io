//////////////////////////////  BASIC FUNCTIONS  //////////////////////////////

function mean(mat){
  if(typeof(mat)==='number'){
    return mat;
  }else if(Array.isArray(mat)){
    let arr = flatten(mat);
    return sum(arr)/arr.length;
  }
}

function median(mat){
  if(typeof(mat)==='number'){
    return mat;
  }else if(Array.isArray(mat)){
    let arr = sorted(flatten(mat));
    let N = arr.length;
    if(N%2===0){
      return (arr[N/2] + arr[N/2-1])/2;
    }else{
      return arr[(N-1)/2];
    }
  }
}

function variance(mat, unbiased=true){
  if(!Array.isArray(mat)){mat = [mat];}
  let arr = flatten(mat);
  if(unbiased===true){
    var N = arr.length-1;
  }else{
    var N = arr.length;
  }
  let mu = mean(arr);
  return arr.reduce((acc, cur) => acc+(cur-mu)**2, 0)/N;
}

function pooled_variance(arr1, arr2){
  return (variance(arr1,false)*arr1.length + variance(arr2,false)*arr2.length)/(arr1.length+arr2.length-2);
}

function std(mat, unbiased=true){
  if(!Array.isArray(mat)){mat = [mat];}
  let arr = flatten(mat);
  return Math.sqrt(variance(arr, unbiased))
}

function sem(mat){
  let arr = flatten(mat);
  return std(arr)/Math.sqrt(arr.length);
}

function skewness(mat, regularize=false){
  if(!Array.isArray(mat)){mat = [mat];}
  let arr = flatten(mat);
  let N = arr.length;
  let mu = mean(arr);
  let sd = std(arr, false);
  let sk = arr.reduce((acc, cur) => acc+((cur-mu)/sd)**3 ,0)/N;
  if(regularize===false){
    return sk;
  }else{
    return sk*Math.sqrt(N-1)/(N-2);
  }
}

function cov(arr1, arr2, unbiased=true){
  if(arr1.length!==arr2.length){
    return NaN;
  }else{
    let [mu1, mu2] = [mean(arr1), mean(arr2)];
    let s = sum(zip(arr1, arr2).map(x => (x[0]-mu1)*(x[1]-mu2)));
    return (unbiased)? s/(arr1.length-1) : s/arr1.length
  }
}

function cov_matrix(arr1, arr2){
  let vxx = variance(arr1,false);
  let vxy = cov(arr1,arr2,false);
  let vyy = variance(arr2,false);
  return [[vxx,vxy],[vxy,vyy]];
}

function corr(cov12,s1,s2){
  let result = cov12/s1/s2;
  return (result>1)? 1:result;
}

function corr_arr(arr1,arr2){
  return cov(arr1,arr2)/std(arr1)/std(arr2);
}

function spearman(arr1,arr2){
  arr1 = argsort(arr1,reverse=true,plusn=true);
  arr2 = argsort(arr2,reverse=true,plusn=true);
  let N = arr1.length;
  let rho = sum(zip(arr1, arr2).map(x => (x[0]-x[1])**2));
  return 1 - 6*rho/N/(N**2-1);
}

function regression(arr1,arr2){
  let coef = cov(arr1,arr2)/variance(arr1);
  let intercept = mean(arr2) - coef*mean(arr1);
  return [intercept, coef];
}

// calculate order statistic for Shapiro-wilk
function order_statistic(n){
  let arr = [];
  let cov_mat = zeros(n,n);
  for(let k=1; k<=n; k++){
    let fx = x => x*normal_pdf(x)*(normal_cdf(x)**(k-1))*((1-normal_cdf(x))**(n-k));
    let X = k*combination(n,k)*gauss_legendre(fx,-10,10,2e2);
    arr.push(X);
    for(let l=k; l<=n; l++){
      let fxy = (x,y) => fact(n)/fact(k-1)/fact(l-1-k)/fact(n-l)*normal_cdf(x)**(k-1)*(normal_cdf(y)-normal_cdf(x))**(l-1-k)*(1-normal_cdf(y))**(n-l)*normal_pdf(x)*normal_pdf(y)*x*y;
      let XY = gauss_legendre2D(fxy,-5,5,1e2);
      cov_mat[k-1][l-1] = XY;
      cov_mat[l-1][k-1] = XY;
    }
  }
  let norm_arr = norm(arr);
  return [round(arr.map(x => x/norm_arr), 10), cov_mat];
}

function qqplot(arr){
  let arr_sorted = sorted(arr);
  let [mu, sd] = [mean(arr), std(arr)]; // sample mean & SD
  let rank = range(arr.length).map(i => (i+0.5)/arr.length); // [0.5/n, 1.5/n,...]
  rank = rank.map(x => normal_inv(x, mu, sd)); // [0.5/n, 1.5/n,...] => ideal normal distribution
  return [arr_sorted, rank]; // [sorted original values, theoretical values]
}

function shapiro_wilk(arr){
  let arr_sorted = sorted(arr);
  let W = 0;
  if(arr.length <= 50){
    for(var i=0; i<arr.length; i++){
      W += CONSTANT_SHAPIRO_ai[arr.length][i] * arr_sorted[i]; // a_i * x_i
    }
    W = W**2 / variance(arr, unbiased=false) / arr.length; // W = (Σ a*x)**2 / Σ (x-μ)**2
    u = Math.log(arr.length);
    v = Math.log(u);
    mu = -1.2725 + 1.0521 * (v - u);
    sigma = 1.0308 - 0.26758 * (v + 2/u);
    z = (Math.log(1 - W) - mu) / sigma;
    return [W, z, z_to_p(Math.abs(z))];
  }else{
    return [0, 0, 0]
  }
}

//////////////////////////////  HYPOTHESIS TESTING  //////////////////////////////

function chi2_fit(arr1,arr2,yates=false){
  let chi2_value = 0;
  if(arr1.length!==arr2.length){
    return NaN;
  }else{
    let exp_arr = arr2.map(x => sum(arr1)*x/sum(arr2)); 
    for(var i=0;i<arr1.length;i++){
      chi2_value += (arr1[i]-exp_arr[i])**2/exp_arr[i];
    }
    return [chi2_value, exp_arr];
  }
}

function chi2_independence(mat){
  let row_length = new Set(mat.map(x => x.length));
  if(Array.from(row_length).length != 1){
    return NaN;
  }else{
    let sums_row = mat.map(sum);
    let sums_col = transpose(mat).map(sum);
    let whole_sum = sum(sums_row);
    let chi2_value = 0;
    for(var i=0;i<mat.length;i++){
      for(var j=0;j<mat[0].length;j++){
        var expect = sums_row[i]*sums_col[j]/whole_sum;
        chi2_value += (mat[i][j] - expect)**2 / expect;
      }
    }
  let cramerV = Math.sqrt(chi2_value/whole_sum/(Math.min(mat.length, mat[0].length)-1)); 
  return [chi2_value, cramerV];
  }
}

function adjusted_residual(mat){
  let row_length = new Set(mat.map(x => x.length));
  if(Array.from(row_length).length != 1){
    return NaN;
  }else{
    let sums_row = mat.map(sum);
    let sums_col = transpose(mat).map(sum);
    let whole_sum = sum(sums_row);
    for(var i=0;i<mat.length;i++){
      for(var j=0;j<mat[0].length;j++){
        var expect = sums_row[i]*sums_col[j]/whole_sum;
        mat[i][j] = (mat[i][j] - expect) / Math.sqrt(expect*(1-sums_row[i]/whole_sum)*(1-sums_col[j]/whole_sum));
      }
    }
  return mat;
  }
}

function welch(mu1,mu2,s1,s2,n1,n2){
  let v1 = s1**2; let v2 = s2**2;
  let t = (mu1-mu2)/Math.sqrt(v1/n1+v2/n2);
  let df = (v1/n1+v2/n2)**2 / ((v1/n1)**2/(n1-1)+(v2/n2)**2/(n2-1));
  return [t,df,t_to_p(Math.abs(t),df)];
}

function welch_arr(arr1,arr2){
  let mu1 = mean(arr1); let mu2 = mean(arr2);
  let v1 = variance(arr1); let v2 = variance(arr2);
  let n1 = arr1.length; let n2 = arr2.length;
  let t = (mu1-mu2)/Math.sqrt(v1/n1+v2/n2);
  let df = (v1/n1+v2/n2)**2 / ((v1/n1)**2/(n1-1)+(v2/n2)**2/(n2-1));
  return [t,df,t_to_p(Math.abs(t),df)];
}

function mann_whitney(arr1, arr2){
  if(arr1.length > arr2.length){
    [arr1, arr2] = [arr2, arr1];
  }
  arr1 = sorted(arr1);
  arr2 = sorted(arr2);
  let [n1, n2] = [arr1.length, arr2.length]
  let U = sum(arr1.map(x => arr2.filter(y => y < x).length));
  let mu = n1*n2 / 2;
  let sd = Math.sqrt(n1*n2*(n1+n2+1)/12);
  let z = (U-mu)/sd;
  let p = z_to_p(Math.abs(z));
  return [z, p];
}

function effect_size(mu1,mu2,s1,s2,n1,n2){
  let pooled_std = Math.sqrt((s1*(n1-1)+s2*(n2-2))/(n1+n2-2))
  return (mu2-mu1)/pooled_std;
}

function effect_size_arr(arr1,arr2){
  let pooled_std = Math.sqrt(pooled_variance(arr1,arr2));
  return (mean(arr2)-mean(arr1))/pooled_std;
}


////////////////////  DISTRIBUTIONS  ////////////////////

//////////  NORMAL DISTRIBUTION  //////////

function normal_pdf(x, mu=0, sd=1){
  return Math.exp(-1*(x-mu)**2/(2*sd**2))/Math.sqrt(2*Math.PI)/sd;
}
function normal_cdf(x, mu=0, sd=1, split=1e3){
  return (1 + erf((x-mu)/Math.sqrt(2)/sd, split)) * 0.5;
}
function normal_inv(p, mu=0, sd=1){
  if(p<0 || p>1){return NaN;}
  return mu + sd * Math.sqrt(2) * erf_inv(2*p-1);
}

/** 
 * normal distribution
 * z-score -> one-tailed p(z≤x) [0≤p<0.5]
 * @param {Number} z z-score
 * @param {Boolean} taylor whether to use Taylor expansion
 * @param {Number} N order of Taylor expansion
 * @return {Number} probability p(z≤x)
 * N=100 is default. if z<5, it is enough to set N~50
 */
function z_to_p(z, taylor=false, N=100){
  if(z<0){return NaN;}
  z = z/(2**0.5);
  let p = (taylor==false)? 0.5-0.5*erf(z) : 0.5-0.5*erf2(z, N);
  return (p>0)? p:0;
}
/**
 * inverse normal distribution (p -> z-score)
 * @param {Number} p p-value
 * @param {Boolean} taylor whether to use Taylor expansion
 * @param {Number} N order of Taylor expansion
 * @return {Number} z-score
 * use Newton's method or Taylor
 */
function p_to_z(p, taylor=false, N=300){
  if(p<0 || 0.5<p){return NaN;}
  if(taylor==false){ // Newton's method
    return Math.sqrt(2) * erf_inv(1-2*p);
  }else{ //taylor
    return Math.sqrt(2) * erf_inv2(1-2*p, N);
  }
}


//////////  T-DISTRIBUTION  //////////

/**
 * t-distribution
 * @param {Number} t t-score 
 * @param {Number} df degree of freedom
 */
function t_to_p(t,df){
  let x = (t+Math.sqrt(t**2+df))/(2*Math.sqrt(t**2+df));
  let p = 1-regularized_beta(df/2,df/2,x);
  return (p>0)? p:0;
}
/**
 * inverse t-distribution
 * @param {*} p p-value < 0.5
 * @param {*} df degree of freedom
 * use Newton's method
 */
function p_to_t(p,df){
  let x = regularized_beta_inv(df/2,df/2,1-p);
  return (2*x-1)/2*Math.sqrt(df/x/(1-x));
}



/**
 * F-distribution
 * @param {Number} t t-score 
 * @param {Number} df1 degree of freedom 1
 * @param {Number} df2 degree of freedom 1
 * x = df1*f / (df1*f+df2)
 */
function f_to_p(f, df1, df2){
  let x = df1*f/(df1*f+df2);
  let p = 1-regularized_beta(df1/2,df2/2,x);
  return (p>0)? p:0;
}
/**
 * inverse F-distribution
 * @param {Number} p p-value < 0.5
 * @param {Number} df1 degree of freedom
 * @param {Number} df2 degree of freedom
 * use Newton's method
 * f = df2*x/df1(1-x)
 */
function p_to_f(p, df1, df2){
  let x = regularized_beta_inv(df1/2,df2/2,1-p);
  return df2*x/(df1*(1-x));
}


/**
 * Poisson Distribution
 * @param {Number} lambda event rate in an interval
 * @param {Int} k the number of times an event occurs in an interval 
 * @return {Number} probability P(X=k)
 */
function poisson(lambda, k){
  if(Number.isInteger(k)){
    return (lambda**k) * (Math.exp(-lambda)) / fact(k)
  }else{
    return (lambda**k) * (Math.exp(-lambda)) / gamma(k+1)
  }
}
function poisson_to_p(lambda, k, split=1e3, n=5){
  let poi = function(t){
    return (lambda**t) * (Math.exp(-lambda)) / gamma(t+1)
  }
  p = 1 - gauss_legendre(0, k, poi, split, n);
  return (p>0)? p:0;
}
function poisson_cum(lambda, k){
  let cum = 0;
  for(var i=0;i<=k;i++){
    cum += poisson(lambda, k);
  }
  return cum;
}


/**
 * chi-square distribution
 * @param {Number} chi chi2-score 
 * @param {Number} df degree of freedom
 */
function chi_to_p(chi,df){
  let p = 1-regularized_gamma(df/2,chi/2);
  return (p>0)? p:0;
}
function p_to_chi(p,df){
  return regularized_gamma_inv(df/2,(1-p))*2;
}
function chi_pdf(x, k=1){
  return x**(k/2-1) * Math.exp(-x/2) / (2**(k/2)) / gamma(k/2);
}


/**
 * Poisson Distribution
 * @param {Number} lambda event rate in an interval
 * @param {Int} k the number of times an event occurs in an interval 
 * @return {Number} probability P(X=k)
 */
function poisson(lambda, k){
  if(Number.isInteger(k)){
    return (lambda**k) * (Math.exp(-lambda)) / fact(k);
  }else{
    return (lambda**k) * (Math.exp(-lambda)) / gamma(k+1);
  }
}

function poisson_cum(lambda, k){
  if(!Number.isInteger(k)){return NaN;}
  let cum = 0;
  for(var i=0;i<k;i++){
    cum += poisson(lambda, i);
  }
  return 1-cum;
}

function poisson_to_p(lambda, k, split=100){
  let func = function(t){return (lambda**t)*(Math.exp(-lambda))/gamma(t+1);}
  return 1-gauss_legendre(func,0,k,split);
}

/**
 * 
 * @param {*} a total number of groups 
 * @param {*} q statistic
 * @param {*} r1 sample size of group1
 * @param {*} r2 sample size of group2
 * @param {*} df 
 */
function studentized(a, q, r1, r2, df){
  let phi = (x => 1-z_to_p(x));
  let r = 
  func = (x => normal(x)*(phi(x)-phi(x-q))**(r-1));
  H = gauss_legendre(func, -10, 10, 2e3);
}

////////////////////  TEST OF NORMALITY  ////////////////////




////////////////////  ANOVA  ////////////////////

// 1D ANOVA
function anova(arrs){
  let df_between = arrs.length-1;
  let df_within = sum(arrs.map(arr => arr.length-1));
  let means = arrs.map(arr => mean(arr)); // group means
  let whole_mean = mean(arrs.flat()); // whole mean
  let SS_between = 0; let SS_within = 0;
  for(var i=0;i<arrs.length;i++){
    SS_between += arrs[i].length*(means[i]-whole_mean)**2;
    SS_within += sum(arrs[i].map(elem => (elem-means[i])**2));
  }
  let F = (SS_between/df_between)/(SS_within/df_within);
  let p = f_to_p(F, df_between, df_within);
  let eta = SS_between/(SS_between+SS_within);
  return [SS_between, df_between, SS_within, df_within, F, p, eta];
}

function tukey_kramer(arrs){
  let means = arrs.map(arr => mean(arr)); // group means
  [_, _, SS_within, df_within, _, _, _] = anova(arrs);
  let MS = SS_within/df_within;
  for(var i=0; i<arrs.length-1; i++){
    for(var j=i+1; j<arrs.length; j++){
      let ni = arrs[i].length; let nj = arrs[j].length;
      let q = Math.abs(means[i]-means[j])/Math.sqrt(MS*((ni+nj)/2/ni/nj));
    }
  }
}

// 2D ANOVA w/o replication
function anova2(rows){
  let cols = transpose(rows);
  let means_row = rows.map(row => mean(row));
  let means_col = cols.map(col => mean(col));
  let whole_mean = mean(rows.flat()); // whole mean
  let SS_row = 0; let SS_col = 0; let error = 0;
  for(var i=0;i<rows.length;i++){
    for(var j=0;j<rows[i].length;j++){
      SS_row += (means_row[i]-whole_mean)**2;
      SS_col += (means_col[j]-whole_mean)**2;
      error += (rows[i][j]+whole_mean-means_row[i]-means_col[j])**2;
    }
  }
  df_row = rows.length - 1; df_col = cols.length - 1;
  df_error = df_row * df_col;
  F_row = (SS_row/df_row)/(error/df_error); F_col = (SS_col/df_col)/(error/df_error);
  p_row = f_to_p(F_row,df_row,df_error); p_col = f_to_p(F_col,df_col,df_error);
  return [SS_row,df_row,F_row,p_row,SS_col,df_col,F_col,p_col,error,df_error]
}

// 2D ANOVA with replication
function anova2rep(tensor){
  let means_row = tensor.map(mat => mean(mat.flat()));
  let means_col = transpose(tensor).map(mat => mean(mat.flat()));
  let whole_mean = mean(tensor.map(x => x.flat()).flat());
  let SS_row = 0; let SS_col = 0; let SS_int = 0; let error = 0;
  for(var i=0;i<means_row.length;i++){
    SS_row += tensor[i].flat().length * (means_row[i]-whole_mean)**2;
  }
  for(var i=0;i<means_col.length;i++){
    SS_col += transpose(tensor)[i].flat().length * (means_col[i]-whole_mean)**2;
  }
  for(var i=0;i<tensor.length;i++){
    for(var j=0;j<tensor[i].length;j++){
      error += sum(tensor[i][j].map(x => (x - mean(tensor[i][j]))**2));
      SS_int += tensor[i][j].length * (mean(tensor[i][j])+whole_mean-means_row[i]-means_col[j])**2;
    }
  }
  df_row = tensor.length - 1; df_col = tensor[0].length - 1;
  df_int = df_row * df_col; df_error = tensor.map(x=>x.flat()).flat().length - (df_row+df_col+df_int+1);
  F_row = (SS_row/df_row)/(error/df_error); F_col = (SS_col/df_col)/(error/df_error); F_int = (SS_int/df_int)/(error/df_error);
  p_row = f_to_p(F_row,df_row,df_error); p_col = f_to_p(F_col,df_col,df_error); p_int = f_to_p(F_int,df_int,df_error);
  return [SS_row,df_row,F_row,p_row,SS_col,df_col,F_col,p_col,SS_int,df_int,F_int,p_int,error,df_error]
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const CONSTANT_SHAPIRO_ai = {
	2:[-0.7071067812, 0.7071067812],
	3:[-0.70710678, 0, 0.70710678],
	4:[-0.68715937, -0.1667693, 0.1667693, 0.68715937],
	5:[-0.66464398, -0.24134701, 0, 0.24134701, 0.66464398],
	6:[-0.64310391, -0.28063886, -0.08751683, 0.08751683, 0.28063886, 0.64310391],
	7:[-0.62329299, -0.30309697, -0.14013593, 0, 0.14013593, 0.30309697, 0.62329299],
	8:[-0.60525884, -0.31643003, -0.17431139, -0.05611875, 0.05611875, 0.17431139, 0.31643003, 0.60525884],
	9:[-0.58885504, -0.32439017, -0.1976368, -0.09465965, 0, 0.09465965, 0.1976368, 0.32439017, 0.58885504],
	10:[-0.57389464, -0.32899869, -0.21410055, -0.1223626, -0.03991433, 0.03991433, 0.1223626, 0.21410055, 0.32899869, 0.57389464],
	11:[-0.5601977, -0.33142719, -0.22599091, -0.14293391, -0.06951667, 0, 0.06951667, 0.14293391, 0.22599091, 0.33142719, 0.5601977],
	12:[-0.54760474, -0.33239331, -0.23470901, -0.15858226, -0.09214732, -0.0302647, 0.0302647, 0.09214732, 0.15858226, 0.23470901, 0.33239331, 0.54760474],
	13:[-0.53597866, -0.33235602, -0.241157, -0.17070519, -0.1098538, -0.05386593, 0, 0.05386593, 0.1098538, 0.17070519, 0.241157, 0.33235602, 0.53597866],
	14:[-0.5252028, -0.33161902, -0.24593944, -0.18022881, -0.12395651, -0.07267959, -0.02397242, 0.02397242, 0.07267959, 0.12395651, 0.18022881, 0.24593944, 0.33161902, 0.5252028],
	15:[-0.51517821, -0.33038901, -0.2494747, -0.18779068, -0.1353487, -0.08794754, -0.04333021, 0, 0.04333021, 0.08794754, 0.1353487, 0.18779068, 0.2494747, 0.33038901, 0.51517821],
	16:[-0.50582076, -0.32880988, -0.25205998, -0.19384371, -0.14465472, -0.10050551, -0.05923735, -0.01960592, 0.01960592, 0.05923735, 0.10050551, 0.14465472, 0.19384371, 0.25205998, 0.32880988, 0.50582076],
	17:[-0.4970587, -0.32698378, -0.25391112, -0.19871797, -0.15232533, -0.11095083, -0.07251044, -0.035829, 0, 0.035829, 0.07251044, 0.11095083, 0.15232533, 0.19871797, 0.25391112, 0.32698378, 0.4970587],
	18:[-0.48883047, -0.32498435, -0.25518779, -0.20265869, -0.15869544, -0.11971504, -0.08369527, -0.0494723, -0.01643935, 0.01643935, 0.0494723, 0.08369527, 0.11971504, 0.15869544, 0.20265869, 0.25518779, 0.32498435, 0.48883047],
	19:[-0.48108309, -0.32286547, -0.25601013, -0.20585129, -0.16401937, -0.12712024, -0.09320953, -0.06111839, -0.0302592, 0, 0.0302592, 0.06111839, 0.09320953, 0.12712024, 0.16401937, 0.20585129, 0.25601013, 0.32286547, 0.48108309],
	20:[-0.47377062, -0.32066692, -0.25646988, -0.20843748, -0.16849371, -0.13341426, -0.10135814, -0.07112049, -0.04209601, -0.01407045, 0.01407045, 0.04209601, 0.07112049, 0.10135814, 0.13341426, 0.16849371, 0.20843748, 0.25646988, 0.32066692, 0.47377062],
	21:[-0.46685314, -0.31841841, -0.25663807, -0.21052712, -0.1722724, -0.13879174, -0.10837344, -0.07978589, -0.05240427, -0.025988, 0, 0.025988, 0.05240427, 0.07978589, 0.10837344, 0.13879174, 0.1722724, 0.21052712, 0.25663807, 0.31841841, 0.46685314],
	22:[-0.46029562, -0.31614215, -0.25657045, -0.21220598, -0.17547659, -0.14340916, -0.11443821, -0.0873348, -0.06139225, -0.03634954, -0.01226057, 0.01226057, 0.03634954, 0.06139225, 0.0873348, 0.11443821, 0.14340916, 0.17547659, 0.21220598, 0.25657045, 0.31614215, 0.46029562],
	23:[-0.45406743, -0.313855, -0.25631131, -0.21354197, -0.17820274, -0.14739338, -0.11969964, -0.09393652, -0.06930043, -0.04554563, -0.02262959, 0, 0.02262959, 0.04554563, 0.06930043, 0.09393652, 0.11969964, 0.14739338, 0.17820274, 0.21354197, 0.25631131, 0.313855, 0.45406743],
	24:[-0.44814131, -0.3115695, -0.25589616, -0.21458931, -0.18052715, -0.15084815, -0.12428015, -0.09972536, -0.07629169, -0.05366002, -0.03176038, -0.01086002, 0.01086002, 0.03176038, 0.05366002, 0.07629169, 0.09972536, 0.12428015, 0.15084815, 0.18052715, 0.21458931, 0.25589616, 0.3115695, 0.44814131],
	25:[-0.44249338, -0.30929533, -0.25535392, -0.21539188, -0.18251117, -0.15385876, -0.12828216, -0.10481082, -0.08249146, -0.06089471, -0.04002238, -0.01993645, 0, 0.01993645, 0.04002238, 0.06089471, 0.08249146, 0.10481082, 0.12828216, 0.15385876, 0.18251117, 0.21539188, 0.25535392, 0.30929533, 0.44249338],
	26:[-0.43710199, -0.30703944, -0.25470804, -0.21598559, -0.18420347, -0.15649456, -0.13179323, -0.10928603, -0.08799878, -0.06737286, -0.04737992, -0.02801961, -0.00977086, 0.00977086, 0.02801961, 0.04737992, 0.06737286, 0.08799878, 0.10928603, 0.13179323, 0.15649456, 0.18420347, 0.21598559, 0.25470804, 0.30703944, 0.43710199],
	27:[-0.43194835, -0.30480739, -0.25397816, -0.2164003, -0.18564364, -0.15881275, -0.13488812, -0.1132303, -0.09289493, -0.07318931, -0.0540149, -0.03549074, -0.01774219, 0, 0.01774219, 0.03549074, 0.0540149, 0.07318931, 0.09289493, 0.1132303, 0.13488812, 0.15881275, 0.18564364, 0.2164003, 0.25397816, 0.30480739, 0.43194835],
	28:[-0.42701485, -0.30260272, -0.2531801, -0.21666101, -0.18686336, -0.16085874, -0.13763068, -0.11671398, -0.09724926, -0.07841848, -0.06002117, -0.04219099, -0.02491481, -0.0089275, 0.0089275, 0.02491481, 0.04219099, 0.06002117, 0.07841848, 0.09724926, 0.11671398, 0.13763068, 0.16085874, 0.18686336, 0.21666101, 0.2531801, 0.30260272, 0.42701485],
	29:[-0.42228667, -0.30042865, -0.25232763, -0.21678921, -0.18788901, -0.16266994, -0.14007595, -0.11979903, -0.10112057, -0.08312279, -0.0654707, -0.04829411, -0.03171227, -0.01592991, 0, 0.01592991, 0.03171227, 0.04829411, 0.0654707, 0.08312279, 0.10112057, 0.11979903, 0.14007595, 0.16266994, 0.18788901, 0.21678921, 0.25232763, 0.30042865, 0.42228667],
	30:[-0.41774909, -0.29828651, -0.25143139, -0.21680303, -0.18874216, -0.16427491, -0.14226951, -0.12254161, -0.10456115, -0.08735548, -0.07042048, -0.05386924, -0.03784348, -0.0222912, -0.00828678, 0.00828678, 0.0222912, 0.03784348, 0.05386924, 0.07042048, 0.08735548, 0.10456115, 0.12254161, 0.14226951, 0.16427491, 0.18874216, 0.21680303, 0.25143139, 0.29828651, 0.41774909],
	31:[-0.3848832378, -0.305378456, -0.2587795836, -0.2242207609, -0.1959701501, -0.1716018277, -0.149848893, -0.1299589914, -0.1114437715, -0.0939642052, -0.0772717062, -0.0611751375, -0.0455209544, -0.0301804619, -0.0150410936, 0, 0.0150410936, 0.0301804619, 0.0455209544, 0.0611751375, 0.0772717062, 0.0939642052, 0.1114437715, 0.1299589914, 0.149848893, 0.1716018277, 0.1959701501, 0.2242207609, 0.2587795836, 0.305378456, 0.3848832378],
	32:[-0.380800807, -0.3030550826, -0.2575600447, -0.2238656395, -0.1963572062, -0.1726596127, -0.1515333137, -0.1322429334, -0.1143118647, -0.0974099893, -0.0812960695, -0.065785517, -0.050731051, -0.036010355, -0.0215177202, -0.0071580135, 0.0071580135, 0.0215177202, 0.036010355, 0.050731051, 0.065785517, 0.0812960695, 0.0974099893, 0.1143118647, 0.1322429334, 0.1515333137, 0.1726596127, 0.1963572062, 0.2238656395, 0.2575600447, 0.3030550826, 0.380800807],
	33:[-0.3768723149, -0.3007880343, -0.2563328166, -0.2234507564, -0.1966381465, -0.1735678657, -0.15302615, -0.1342935456, -0.116904375, -0.1005367207, -0.0849560121, -0.0699834991, -0.0554773746, -0.0413207813, -0.0274137551, -0.0136674934, 0, 0.0136674934, 0.0274137551, 0.0413207813, 0.0554773746, 0.0699834991, 0.0849560121, 0.1005367207, 0.116904375, 0.1342935456, 0.15302615, 0.1735678657, 0.1966381465, 0.2234507564, 0.2563328166, 0.3007880343, 0.3768723149],
	34:[-0.3730878564, -0.2985757753, -0.2551020512, -0.2229850417, -0.1968262909, -0.1743441521, -0.1543492168, -0.136137008, -0.1192520606, -0.103380047, -0.0882924882, -0.0738158852, -0.0598132665, -0.0461725038, -0.0327985114, -0.0196077562, -0.0065241619, 0.0065241619, 0.0196077562, 0.0327985114, 0.0461725038, 0.0598132665, 0.0738158852, 0.0882924882, 0.103380047, 0.1192520606, 0.136137008, 0.1543492168, 0.1743441521, 0.1968262909, 0.2229850417, 0.2551020512, 0.2985757753, 0.3730878564],
	35:[-0.3694384148, -0.2964167062, -0.2538711691, -0.2224761168, -0.1969331048, -0.1750036386, -0.1555213686, -0.1377959439, -0.1213814762, -0.1059706952, -0.0913407236, -0.0773228227, -0.0637843333, -0.0506172694, -0.0377307388, -0.0250456538, -0.0124908405, 0, 0.0124908405, 0.0250456538, 0.0377307388, 0.0506172694, 0.0637843333, 0.0773228227, 0.0913407236, 0.1059706952, 0.1213814762, 0.1377959439, 0.1555213686, 0.1750036386, 0.1969331048, 0.2224761168, 0.2538711691, 0.2964167062, 0.3694384148],
	36:[-0.3659157607, -0.2943091956, -0.2526429878, -0.2219305083, -0.1969684957, -0.175559475, -0.1565589716, -0.1392899913, -0.1233156548, -0.1083352825, -0.0941311757, -0.0805389419, -0.0674298005, -0.0546994297, -0.0422605826, -0.0300379677, -0.017964524, -0.0059785635, 0.0059785635, 0.017964524, 0.0300379677, 0.0422605826, 0.0546994297, 0.0674298005, 0.0805389419, 0.0941311757, 0.1083352825, 0.1233156548, 0.1392899913, 0.1565589716, 0.175559475, 0.1969684957, 0.2219305083, 0.2526429878, 0.2943091956, 0.3659157607],
	37:[-0.3625123649, -0.2922516049, -0.251419826, -0.2213538223, -0.1969410559, -0.1760231066, -0.1574762897, -0.1406362686, -0.1250746633, -0.1104969715, -0.0966903062, -0.0834942672, -0.0707835891, -0.0584572207, -0.046431116, -0.0346332612, -0.0230000881, -0.0114737597, 0, 0.0114737597, 0.0230000881, 0.0346332612, 0.046431116, 0.0584572207, 0.0707835891, 0.0834942672, 0.0966903062, 0.1104969715, 0.1250746633, 0.1406362686, 0.1574762897, 0.1760231066, 0.1969410559, 0.2213538223, 0.251419826, 0.2922516049, 0.3625123649],
	38:[-0.3592213229, -0.2902423061, -0.2502035879, -0.2207508882, -0.1968582626, -0.1764045311, -0.1582858015, -0.1418497566, -0.1266760554, -0.1124760053, -0.0990412086, -0.0862149532, -0.0738751811, -0.0619237837, -0.0502795518, -0.038873331, -0.0276445514, -0.0165386309, -0.0055049332, 0.0055049332, 0.0165386309, 0.0276445514, 0.038873331, 0.0502795518, 0.0619237837, 0.0738751811, 0.0862149532, 0.0990412086, 0.1124760053, 0.1266760554, 0.1418497566, 0.1582858015, 0.1764045311, 0.1968582626, 0.2207508882, 0.2502035879, 0.2902423061, 0.3592213229],
	39:[-0.3560362888, -0.2882796947, -0.2489958329, -0.2201258769, -0.1967266429, -0.1767125114, -0.1589984625, -0.142943614, -0.1281352461, -0.114290146, -0.1012041214, -0.0887238837, -0.0767303192, -0.0651279866, -0.0538382113, -0.0427943566, -0.0319384532, -0.0212186998, -0.010587524, 0, 0.010587524, 0.0212186998, 0.0319384532, 0.0427943566, 0.0538382113, 0.0651279866, 0.0767303192, 0.0887238837, 0.1012041214, 0.114290146, 0.1281352461, 0.142943614, 0.1589984625, 0.1767125114, 0.1967266429, 0.2201258769, 0.2489958329, 0.2882796947, 0.3560362888],
	40:[-0.352951418, -0.2863621994, -0.247797832, -0.2194823986, -0.1965519118, -0.1769547526, -0.1596239233, -0.143929439, -0.1294658203, -0.1159550374, -0.1031968506, -0.091041163, -0.079371579, -0.0680950901, -0.0571353044, -0.0464278205, -0.0359169458, -0.0255532788, -0.0152918542, -0.0050906541, 0.0050906541, 0.0152918542, 0.0255532788, 0.0359169458, 0.0464278205, 0.0571353044, 0.0680950901, 0.079371579, 0.091041163, 0.1031968506, 0.1159550374, 0.1294658203, 0.143929439, 0.1596239233, 0.1769547526, 0.1965519118, 0.2194823986, 0.247797832, 0.2863621994, 0.352951418],
	41:[-0.3499613169, -0.2844882891, -0.2466106153, -0.2188235855, -0.1963390864, -0.17713805, -0.1601707114, -0.1448174875, -0.1306797911, -0.1174845059, -0.1050351191, -0.0931845213, -0.0818188379, -0.0708472929, -0.0601955639, -0.0498012503, -0.0396106695, -0.02957651, -0.0196560472, -0.0098097288, 0, 0.0098097288, 0.0196560472, 0.02957651, 0.0396106695, 0.0498012503, 0.0601955639, 0.0708472929, 0.0818188379, 0.0931845213, 0.1050351191, 0.1174845059, 0.1306797911, 0.1448174875, 0.1601707114, 0.17713805, 0.1963390864, 0.2188235855, 0.2466106153, 0.2844882891, 0.3499613169],
	42:[-0.3470609986, -0.282656477, -0.2454350105, -0.2181521593, -0.1960925835, -0.1772684132, -0.1606463845, -0.1456168568, -0.1317878152, -0.1188908122, -0.1067328585, -0.0951696509, -0.0840896633, -0.0734041798, -0.0630407657, -0.0529388236, -0.0430464599, -0.0333181994, -0.0237132601, -0.0141942012, -0.0047258165, 0.0047258165, 0.0141942012, 0.0237132601, 0.0333181994, 0.0430464599, 0.0529388236, 0.0630407657, 0.0734041798, 0.0840896633, 0.0951696509, 0.1067328585, 0.1188908122, 0.1317878152, 0.1456168568, 0.1606463845, 0.1772684132, 0.1960925835, 0.2181521593, 0.2454350105, 0.282656477, 0.3470609986],
	43:[-0.3442458438, -0.280865324, -0.2442716754, -0.2174704899, -0.1958162998, -0.1773511718, -0.1610576593, -0.1463356396, -0.1327993748, -0.1201848624, -0.108302453, -0.0970104874, -0.0861996366, -0.0757830938, -0.0656901567, -0.0558618638, -0.0462479249, -0.036804491, -0.0274924793, -0.018276273, -0.0091226707, 0, 0.0091226707, 0.018276273, 0.0274924793, 0.036804491, 0.0462479249, 0.0558618638, 0.0656901567, 0.0757830938, 0.0861996366, 0.0970104874, 0.108302453, 0.1201848624, 0.1327993748, 0.1463356396, 0.1610576593, 0.1773511718, 0.1958162998, 0.2174704899, 0.2442716754, 0.280865324, 0.3442458438],
	44:[-0.3415115663, -0.2791134401, -0.2431211248, -0.216780643, -0.1955136819, -0.1773910632, -0.161410521, -0.1469810546, -0.1337229307, -0.1213763862, -0.1097549447, -0.0987194458, -0.0881626224, -0.0779994457, -0.0681608108, -0.0585892493, -0.0492359181, -0.0400584183, -0.0310191652, -0.0220841313, -0.013221842, -0.0044025402, 0.0044025402, 0.013221842, 0.0220841313, 0.0310191652, 0.0400584183, 0.0492359181, 0.0585892493, 0.0681608108, 0.0779994457, 0.0881626224, 0.0987194458, 0.1097549447, 0.1213763862, 0.1337229307, 0.1469810546, 0.161410521, 0.1773910632, 0.1955136819, 0.216780643, 0.2431211248, 0.2791134401, 0.3415115663],
	45:[-0.3388541822, -0.2773994855, -0.2419837532, -0.216084422, -0.1951877841, -0.1773923093, -0.1617103163, -0.1475595581, -0.1345660527, -0.1224740879, -0.1111002076, -0.1003076191, -0.0899909969, -0.0800669741, -0.0704679261, -0.0611377545, -0.0520289302, -0.0431003566, -0.0343157793, -0.0256425663, -0.0170507423, -0.0085121958, 0, 0.0085121958, 0.0170507423, 0.0256425663, 0.0343157793, 0.0431003566, 0.0520289302, 0.0611377545, 0.0704679261, 0.0800669741, 0.0899909969, 0.1003076191, 0.1111002076, 0.1224740879, 0.1345660527, 0.1475595581, 0.1617103163, 0.1773923093, 0.1951877841, 0.216084422, 0.2419837532, 0.2773994855, 0.3388541822],
	46:[-0.3362699833, -0.2757221704, -0.2408598535, -0.2153834027, -0.1948413189, -0.1773586805, -0.1619618328, -0.1480769381, -0.135335531, -0.1234857751, -0.1123470953, -0.1017849472, -0.0916958396, -0.0819979642, -0.0726250742, -0.0635223345, -0.0546434158, -0.0459483984, -0.0374022171, -0.0289734745, -0.0206335074, -0.012355629, -0.0041144891, 0.0041144891, 0.012355629, 0.0206335074, 0.0289734745, 0.0374022171, 0.0459483984, 0.0546434158, 0.0635223345, 0.0726250742, 0.0819979642, 0.0916958396, 0.1017849472, 0.1123470953, 0.1234857751, 0.135335531, 0.1480769381, 0.1619618328, 0.1773586805, 0.1948413189, 0.2153834027, 0.2408598535, 0.2757221704, 0.3362699833],
	47:[-0.3337555119, -0.2740802549, -0.2397496331, -0.2146789635, -0.1944766993, -0.1772935513, -0.1621693671, -0.1485383963, -0.1360374707, -0.1244184682, -0.1135035664, -0.1031603608, -0.0932870969, -0.0838034334, -0.0746444107, -0.0657563641, -0.0570940656, -0.0486186652, -0.0402961678, -0.0320962751, -0.0239914806, -0.0159563407, -0.0079668669, 0, 0.0079668669, 0.0159563407, 0.0239914806, 0.0320962751, 0.0402961678, 0.0486186652, 0.0570940656, 0.0657563641, 0.0746444107, 0.0838034334, 0.0932870969, 0.1031603608, 0.1135035664, 0.1244184682, 0.1360374707, 0.1485383963, 0.1621693671, 0.1772935513, 0.1944766993, 0.2146789635, 0.2397496331, 0.2740802549, 0.3337555119],
	48:[-0.3313075398, -0.2724725474, -0.2386532274, -0.2139723101, -0.1940960761, -0.177199948, -0.1623367835, -0.1489486174, -0.136677374, -0.1252784953, -0.114576793, -0.1044419036, -0.094773721, -0.0854932889, -0.0765368542, -0.0678518411, -0.0593940373, -0.0511255705, -0.0430134137, -0.035028254, -0.0271436112, -0.0193351341, -0.0115800196, -0.0038565164, 0.0038565164, 0.0115800196, 0.0193351341, 0.0271436112, 0.035028254, 0.0430134137, 0.0511255705, 0.0593940373, 0.0678518411, 0.0765368542, 0.0854932889, 0.094773721, 0.1044419036, 0.114576793, 0.1252784953, 0.136677374, 0.1489486174, 0.1623367835, 0.177199948, 0.1940960761, 0.2139723101, 0.2386532274, 0.2724725474, 0.3313075398],
	49:[-0.3289230489, -0.2708979043, -0.2375707107, -0.2132644986, -0.193701369, -0.1770805897, -0.1624675643, -0.1493118293, -0.1372602102, -0.1260715727, -0.1155732535, -0.1056368383, -0.09616379, -0.0870764625, -0.078312238, -0.0698195575, -0.0615551496, -0.0534820397, -0.0455680822, -0.037784852, -0.0301067856, -0.0225104983, -0.0149742259, -0.0074773529, 0, 0.0074773529, 0.0149742259, 0.0225104983, 0.0301067856, 0.037784852, 0.0455680822, 0.0534820397, 0.0615551496, 0.0698195575, 0.078312238, 0.0870764625, 0.09616379, 0.1056368383, 0.1155732535, 0.1260715727, 0.1372602102, 0.1493118293, 0.1624675643, 0.1770805897, 0.193701369, 0.2132644986, 0.2375707107, 0.2708979043, 0.3289230489],
	50:[-0.3265992133, -0.2693552281, -0.2365021066, -0.2125564534, -0.1932942946, -0.1769379239, -0.1625648541, -0.1496318561, -0.137790477, -0.1268028757, -0.116498812, -0.1067517373, -0.0974646096, -0.0885610265, -0.0799794409, -0.0716692468, -0.0635880481, -0.0556996981, -0.0479728576, -0.0403799062, -0.0328961039, -0.0254989262, -0.0181675256, -0.0108822799, -0.0036244034, 0.0036244034, 0.0108822799, 0.0181675256, 0.0254989262, 0.0328961039, 0.0403799062, 0.0479728576, 0.0556996981, 0.0635880481, 0.0716692468, 0.0799794409, 0.0885610265, 0.0974646096, 0.1067517373, 0.116498812, 0.1268028757, 0.137790477, 0.1496318561, 0.1625648541, 0.1769379239, 0.1932942946, 0.2125564534, 0.2365021066, 0.2693552281, 0.3265992133]
}